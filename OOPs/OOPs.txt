## Object: Entities in real world
## Classes: Group of these Entities or Blueprint of Object 

## Access Modifier / Access specifier
Access Modifier - within class  - within package  -  Outside package by subclass only  - Outside package

1. Private      -     Y         -      N          -            N                       -      N
2. Default      -     Y         -      Y          -            N                       -      N
3. Protected    -     Y         -      Y          -            Y                       -      N
1. Public       -     Y         -      Y          -            Y                       -      Y


## Getter/setter
Get - to return the value
set - to modify the value

This: This keyword is used to refer to the current Object



## Constructor
Constructor: Constructor is a special method which is invoked automatically at the time of object creation.

1. It is used to initialize the values of instance variables.
2. It is used to set the initial state of an object.
3. Constructor have the same name as class or structure
4. Constructor don't have a return type. (Not even a void)
5. Constructor are only called once, at object creation
6. memory allocation happens when Constructor is called.

example: Pen p1 = new Pen();

** Constructor overloading: When there are mutiple Constructor is created with different parameters
with same name at that time main fucntion search the suitable Constructor as per the requirement and
this is called Constructor overloading. and also it is an example of polyporphism


## Concept of OOPs / main pillers of OOPs

1. Encapsulation: Encapsulation is defined as the wrapping up of data and methods under a single unit. It also implements data hiding. 

2. Inheritance: Inheritance is when properties and methods of base class are passed on to a derived class.
  --> 2.1 Singl Inheritance
  --> 2.2 Multiple Inheritance
  --> 2.3 Multilevel Inheritance
  --> 2.4 Hierarchical Inheritance
  --> 2.5 Hybrid Inheritance

3. Polymorphism: Polymorphism is the ability of an object to take on multiple forms
  ---> 3.1 Compile time polyporphism - Exp- method overloading
  ---> 3.2 Runtime Polymorphism  -     Exp- method overriding

4. Abstraction: hiding all the unnecessary details and showing only the important part to the user.

---> Abstract class - ( a class that provides a base definition for multiple derived classes to share.) 
- 1. Cannot create an instance of Abstract class 
- 2. Can have Abstract/Non Abstract method
- 3. Can have Constructors

---> Interfaces - (Interface is a Blueprint of class)
Reason of requirement of Interfaces is - Multiple Inheritance and total Abstraction
- implement keyword is used to use interface
- All methods are public, Abstract, & without implementation
- used to acheive total Abstraction
- variables in the interface are final, public, and static



  ** method overloading - Multiple fucntions with same name but different parameters 
  ** method overriding - Parent and child classes both contain the same fucntion with a different definition.

  ## package: package is a type of similar types of classes, interface and sub-packages.
  1. Inbuilt packages
  2. User defined packages

## Static keyword: In java static keyword is used to share the same variable or method of a given class.
- properties
- fucntions
- blocks
- Nested classes


## Super keyword: In java Super keyword is used to refer imediate parent class object
- To access parent's properties
- To access parent's fucntions
- To access parent's Constructor